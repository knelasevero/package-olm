# This file contains configuration which is common to all bundle CSV files.
#
# Some of the CSV fields are required, and while most of these fields are filled
# in automatically by operator-sdk generate bundle, some of the values are
# placeholders and some are left empty.
# See https://github.com/operator-framework/community-operators/blob/master/docs/packaging-required-fields.md
#
# This file contains the values for those fields which should be the same across all versions of the project.
# These values are consumed by the hack/fixup-csv script, which is executed in the Makefile.
#
# TODO(wallrj): some of these fields such as min_ and alm_examples apply to
# ranges of the project versions, so we need to handle that for future
# versions where the min_kubernetes_version may need to be
# incremented or where new fields need to be added to the CRD samples for
# certain versions.

display_name: descheduler

description: |
  Scheduling in Kubernetes is the process of binding pending pods to nodes, and is performed by a component of Kubernetes called kube-scheduler. The scheduler's decisions, whether or where a pod can or can not be scheduled, are guided by its configurable policy which comprises of set of rules, called predicates and priorities. The scheduler's decisions are influenced by its view of a Kubernetes cluster at that point of time when a new pod appears for scheduling. As Kubernetes clusters are very dynamic and their state changes over time, there may be desire to move already running pods to some other nodes for various reasons:

  Some nodes are under or over utilized.
  The original scheduling decision does not hold true any more, as taints or labels are added to or removed from nodes, pod/node affinity requirements are not satisfied any more.
  Some nodes failed and their pods moved to other nodes.
  New nodes are added to clusters.
  Consequently, there might be several pods scheduled on less desired nodes in a cluster. Descheduler, based on its policy, finds pods that can be moved and evicts them. Please note, in current implementation, descheduler does not schedule replacement of evicted pods but relies on the default scheduler for that.

maturity: stable

capabilities: Full Lifecycle

categories:
- Application Runtime

support: The descheduler maintainers

repository: https://github.com/kubernetes-sigs/descheduler

min_kubernetes_version: 1.19.0-0

keywords:
- scheduling
- eviction
- balancing

links:
  - name: Documentation
    url: https://github.com/kubernetes-sigs/descheduler/tree/master/docs
  - name: Release Notes
    url: https://github.com/kubernetes-sigs/descheduler/releases

provider:
    name: The descheduler maintainers
    url: https://github.com/kubernetes-sigs/descheduler

maintainers:
- name: The descheduler maintainers
  email: sig-scheduling-leads@kubernetes.io

alm_examples:
- apiVersion: ""
  kind: "s"
  metadata:
    name: ""
  spec:
    selfSigned: {}
- apiVersion: ""
  kind: ""
  metadata:
    name: ""
  spec:
    selfSigned: {}

# A list of architectures for which there are Docker images.
# TODO: In future we should add arm (ARCH) and darwin and windows (OS)
# but for now I've only listed the ARCH that were in the original downstream PR:
# https://github.com/redhat-openshift-ecosystem/community-operators-prod/pull/434.
#
# See also https://olm.operatorframework.io/docs/advanced-tasks/ship-operator-supporting-multiarch/
architectures:
  - amd64
  - arm64

# A list of Kind.Group which are considered "internal-objects".
# See https://docs.okd.io/4.9/operators/operator_sdk/osdk-generating-csvs.html#osdk-hiding-internal-objects_osdk-generating-csvs
internal_objects:
  - ""
  - ""
